//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AMPWCF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LocationDBEntities : DbContext
    {
        public LocationDBEntities()
            : base("name=LocationDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AppointmentDiary> AppointmentDiaries { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<tblCity> tblCities { get; set; }
        public virtual DbSet<tblLocation> tblLocations { get; set; }
        public virtual DbSet<tblState> tblStates { get; set; }
    
        [DbFunction("LocationDBEntities", "fnBgSplit")]
        public virtual IQueryable<fnBgSplit_Result> fnBgSplit(string strStringToSplit, string strSplitter)
        {
            var strStringToSplitParameter = strStringToSplit != null ?
                new ObjectParameter("strStringToSplit", strStringToSplit) :
                new ObjectParameter("strStringToSplit", typeof(string));
    
            var strSplitterParameter = strSplitter != null ?
                new ObjectParameter("strSplitter", strSplitter) :
                new ObjectParameter("strSplitter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnBgSplit_Result>("[LocationDBEntities].[fnBgSplit](@strStringToSplit, @strSplitter)", strStringToSplitParameter, strSplitterParameter);
        }
    
        public virtual ObjectResult<string> sp_IUD_Location(Nullable<long> locationID, string name, Nullable<decimal> latitude, Nullable<decimal> longitude, string description, Nullable<int> query)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var queryParameter = query.HasValue ?
                new ObjectParameter("Query", query) :
                new ObjectParameter("Query", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_IUD_Location", locationIDParameter, nameParameter, latitudeParameter, longitudeParameter, descriptionParameter, queryParameter);
        }
    
        public virtual int spDuplicateDataDisplay(string strVal)
        {
            var strValParameter = strVal != null ?
                new ObjectParameter("strVal", strVal) :
                new ObjectParameter("strVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDuplicateDataDisplay", strValParameter);
        }
    
        public virtual int spDuplicateDataDisplay2(string strVal)
        {
            var strValParameter = strVal != null ?
                new ObjectParameter("strVal", strVal) :
                new ObjectParameter("strVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDuplicateDataDisplay2", strValParameter);
        }
    
        public virtual ObjectResult<spGetLoctionToDisplay_Result> spGetLoctionToDisplay()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLoctionToDisplay_Result>("spGetLoctionToDisplay");
        }
    
        public virtual ObjectResult<string> Usp_InsertUpdateDelete_Customer(Nullable<long> customerID, string name, string mobileno, string address, Nullable<System.DateTime> birthdate, string emailID, Nullable<int> query)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobilenoParameter = mobileno != null ?
                new ObjectParameter("Mobileno", mobileno) :
                new ObjectParameter("Mobileno", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("Birthdate", birthdate) :
                new ObjectParameter("Birthdate", typeof(System.DateTime));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var queryParameter = query.HasValue ?
                new ObjectParameter("Query", query) :
                new ObjectParameter("Query", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Usp_InsertUpdateDelete_Customer", customerIDParameter, nameParameter, mobilenoParameter, addressParameter, birthdateParameter, emailIDParameter, queryParameter);
        }
    }
}
